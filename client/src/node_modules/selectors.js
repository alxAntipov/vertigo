import * as R from 'ramda';

export const getComicsById = (state, id) => 
    R.prop(id, state.comics)

export const getComics = (state, ownProps) => {
    const activeCategoryId = getActiveCategoryId(ownProps)
    const applyCategory = item => R.equals(
        getActiveCategoryId(ownProps),
        R.prop('categoryId', item)
      )
      
    const comics = R.compose(
        R.when(R.always(activeCategoryId), R.filter(applyCategory)),
        R.map(id => getComicsById(state, id))
    )(state.comicsPage.ids)
    return comics
}

export const getTotalBasketCount = state => R.length(state.basket)

export const getTotalBasketPrice = state => {
  const totalPrice = R.compose(
    R.sum,
    R.pluck('price'),
    R.map(id => getComicsById(state, id))
  )(state.basket)

  return totalPrice
}

export const getCategories = state => R.values(state.categories)
  
export const getActiveCategoryId = ownProps => R.path(['params', 'id'], ownProps)

export const getBasketWithCount = state => {
    const UniqueId = R.uniq(state.basket)
    const comicsCount = id => R.compose(
        R.length,
        R.filter(basketId => R.equals(id, basketId))
    )(state.basket)
    const comicsWithCount = comics => R.assoc('count', comicsCount(comics.id), comics)
    const comics = R.compose(
        R.map(comicsWithCount),
        R.map(id => getComicsById(state, id))
    )(UniqueId)
    return comics
}